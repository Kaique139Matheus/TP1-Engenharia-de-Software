// <auto-generated />
using System;
using BookingDatabase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingDatabase.Migrations
{
    [DbContext(typeof(EasyBookingContext))]
    [Migration("20241104235835_CircularReferenceRemoval")]
    partial class CircularReferenceRemoval
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("BookingDatabase.Models.BookingModel", b =>
                {
                    b.Property<int>("ProviderID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeslotID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClientID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientModelID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeslotModelID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProviderID", "ServiceID", "TimeslotID", "Date");

                    b.HasIndex("ClientModelID");

                    b.HasIndex("TimeslotModelID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookingDatabase.Models.ClientModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BookingDatabase.Models.ProviderModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("BookingDatabase.Models.ReviewModel", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProviderID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientModelID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProviderModelID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientID", "ProviderID");

                    b.HasIndex("ClientModelID");

                    b.HasIndex("ProviderModelID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BookingDatabase.Models.ServiceModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("ProviderID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProviderModelID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ProviderModelID");

                    b.HasIndex("ProviderID", "Name")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BookingDatabase.Models.TimeslotModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ServiceModelID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Time")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ServiceModelID");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("BookingDatabase.Models.BookingModel", b =>
                {
                    b.HasOne("BookingDatabase.Models.ClientModel", null)
                        .WithMany("Bookings")
                        .HasForeignKey("ClientModelID");

                    b.HasOne("BookingDatabase.Models.TimeslotModel", null)
                        .WithMany("Bookings")
                        .HasForeignKey("TimeslotModelID");
                });

            modelBuilder.Entity("BookingDatabase.Models.ReviewModel", b =>
                {
                    b.HasOne("BookingDatabase.Models.ClientModel", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ClientModelID");

                    b.HasOne("BookingDatabase.Models.ProviderModel", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProviderModelID");
                });

            modelBuilder.Entity("BookingDatabase.Models.ServiceModel", b =>
                {
                    b.HasOne("BookingDatabase.Models.ProviderModel", null)
                        .WithMany("Services")
                        .HasForeignKey("ProviderModelID");
                });

            modelBuilder.Entity("BookingDatabase.Models.TimeslotModel", b =>
                {
                    b.HasOne("BookingDatabase.Models.ServiceModel", null)
                        .WithMany("Timeslots")
                        .HasForeignKey("ServiceModelID");
                });

            modelBuilder.Entity("BookingDatabase.Models.ClientModel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookingDatabase.Models.ProviderModel", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BookingDatabase.Models.ServiceModel", b =>
                {
                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("BookingDatabase.Models.TimeslotModel", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
